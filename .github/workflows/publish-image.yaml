# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name:  publish-image

on:
  repository_dispatch:
    types: [publish-image]

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for
#  the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    environment: env_store
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      #
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download application jar
        uses: actions/download-artifact@v4
        with:
          name: store-1.0.0-SNAPSHOT.jar
          path: build/libs
          github-token: ${{ secrets.PACKAGE_ACCESS_TOKEN }}
          run-id: ${{ github.event.client_payload.run_id }}
      # Uses the `docker/login-action` action to log in to the Container registry using the account and password that will
      # publish the packages. Once published, the packages are scoped to the account defined here. Note here that we use the
      # generated Github token as it is short lived
      - name: Docker login
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.client_payload.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
      - name: Call deploy
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PACKAGE_ACCESS_TOKEN }}
          event-type: deploy
          client-payload: |-
            {
              "sha": "${{ github.event.client_payload.sha }}"
            }